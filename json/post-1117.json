{"post":{"id":1117,"title":"How to Get Into 7 Coding Bootcamps","body":"So you’re thinking about applying to a coding bootcamp. What should you expect in the application and interview process? And how do you ensure you get accepted to your dream coding bootcamp? We invited representatives from 7 coding bootcamps to ask all the tough questions about getting into coding school. In this live panel discussion, hear tips and advice about coding challenges, prep programs and more from Flatiron School, New York Code + Design Academy, Fullstack Academy, the Grace Hopper Program, Hack Reactor, Galvanize, and Codesmith! Watch the video, listen to the podcast, read the summary or transcript.\r\n\r\n\r\n\r\nMeet the Panel\r\n\r\nModerated by: Liz Eggleston (Co-founder, Course Report)\r\n\r\n\r\nJordan Calhoun - Flatiron School Admissions Lead, Access Labs\r\nJeff Harr - Fullstack Academy/Grace Hopper Program Director of Admissions\r\nKrystal Kaplan - New York Code + Design Academy Success Coach Manager\r\nTyler Lambe - Hack Reactor/Galvanize General Manager (Hack Reactor NY)\r\nWill Sentance - Codesmith CEO\r\n \r\n\r\n\r\nWhat We Covered in this Panel Discussion\r\n\r\n\r\nWhat each school’s application process looks like\r\nWhat you need to know to pass the coding challenges\r\nThe most important interview question each school asks\r\nHow to prepare for the application process\r\nWhen a paid Bootcamp Prep Program is “worth it”\r\nAge maximums or minimums at each school\r\nWhy “acceptance rate” is a flawed metric – and the question you should be asking instead\r\n \r\n\r\n\r\nKey Takeaways\r\n\r\n\r\nMost schools have coding challenges which you can prepare for with a prep program, or on your own with free resources\r\nFor most schools, the most important interview question is “Why do you want to become a software developer”\r\nMost coding challenges require knowledge of JavaScript\r\nThe admissions teams are there to help you and they want you to succeed\r\nCulture-fit/attitude and being able to work alongside others are important for getting accepted into coding bootcamp\r\nMost schools allow you to apply multiple times\r\nMost schools require students to be 18 or older, with no upper age limit\r\n \r\n\r\n\r\nFull Transcript\r\n\r\nStarting the Application\r\n\r\nFirst, when should people apply to a bootcamp? Should they apply the day before they're ready to start or give themselves a few months? How long does the process take?\r\n\r\nJeff Harr: There are a couple of ways to think about this. One thing I would say is that applying to a program generally doesn't cost anything, and it's a way to signal your interest in a program. My advice would be to apply to a program once you are sure you want to do a program like this. That will put you on the radar of that program, involve you in messaging that's important to communicate with you and give you everything you need to know to go through that process.\r\n\r\nI always encourage people to apply as soon as they know this is what they want to do, and worry about the academic part, and the evaluation part later. Get that on your task list, get updates coming into your email. We’ll know who you are, and that you're interested, then we can tell you what you need to do and how long is going to take. But for the timeframe, I would say, two, three months for the whole process at a minimum.\r\n\r\nJordan Calhoun: I would say, apply when you can explain your passion for coding. We see both ends of the spectrum. I’ve seen people who apply a week before a cohort begins. Then we get people who say, \"I'm going to apply for some time in mid-2019. I just want to get a head start on things.\" The first one is too late, the last one is too soon.\r\n\r\nYou want to be able to explain your passion for coding. And once you're able to articulate that, that's a great time to get started. Because then you can start having a conversation with admissions people about what that pacing looks like, what that timeline looks like, and how soon you can get admitted for a particular cohort.\r\n\r\nDo you think people should apply to multiple schools or put all their eggs in one basket?\r\n\r\nKrystal Kaplan: I think that prospective students should definitely do their research, just like you would go about finding a job. Connect with alumni, ask them questions, do a site visit, audit a class. You want to make sure that it's not only your education but also the culture. Is it a culture fit for you? You should definitely look into that.\r\n\r\nThe Application Process\r\n\r\nThen more specifically, what do the admissions processes and your interview processes look like at each of your schools? Can you talk through that process for you, assuming it takes two to three months, but what are the steps?\r\n\r\nKrystal Kaplan: At New York Code + Design Academy, there are a couple of key steps. One, filling out an application, next, it would be doing a 30-minute interview. Then it would be doing foundations which includes 40 hours’ worth of coding material - it's a prerequisite. And then getting your financial plan in order.\r\n\r\nTyler Lambe: The question is what we look for in students, right. I think most of the schools look for very similar kinds of candidates. At Hack Reactor, we look for curiosity. Our interview process is not simply testing your ability to recollect or memorize information. It’s more to do with how you respond to being thrown into deep water. People’s true selves come out in those moments, and you get the opportunity to really see how an individual responds to being put under pressure and what level of rigor they use to solve a problem in the moment. That really comes down to a degree of self-management that not everybody has. We really look for that because going through Hack Reactor is particularly intensive and so we need to ensure that people are prepared to tackle those challenges.\r\n\r\nWill, what is the process like at the Codesmith?\r\n\r\nWill Sentance: Two interviews. One for culture. Ultimately, if someone is not going to be constructive, and excited by the opportunity to work with others, it ain't going to work. So culture interview first, then a technical interview.\r\n\r\nThe technical interview is an hour long. The biggest thing you have to do for the technical interview is attend our free workshops. We made the bar to get into Codesmith very high so that people will actually succeed out of the program. But that means we have to have free workshops for them to study for the technical interview. Every program here will offer free workshops. Go to as many as you can.\r\n\r\nJeff, what is the process like for Fullstack and Grace Hopper?\r\n\r\nJeff Harr: We have an application, an assessment that you take, followed by an interview process. I want to talk about what we look for as well. A lot of how we evaluate you once we understand that you are technically ready to succeed in the program is based on the way that you handle challenges, failure, and things you haven't seen before.\r\n\r\nBut our admissions process is not designed to make a final call on you on your first try. Many of our students go through our admissions process multiple times. There are occasionally insurmountable reasons why we might not be a good fit for working together, like egregious fit issues, or the way you collaborate with people. But we think even communication is coachable, and we invest in pre-admissions events, courses, and workshops; as ways for us to invest in people who are interested in coming to our school and helping them increase their chances of success in our process.\r\n\r\nLearning how to learn again is a big thing for adult learners. I still have struggles with it in the courses I'm taking. But the reason we do that is so that when you finally get into a program, you're not quitting your job, moving your town, getting daycare for your children, changing up your life, and then putting yourself in a situation where the intensity of the program goes from low to high, and you don't have the skills necessary to deal with it.\r\n\r\nFor the vast majority of applicants, the question is not \"Am I the right fit? It's, “how can I become successful in your program, and when can I join to maximize that?” So we allow a couple of tries in the different parts of our process. And failure is expected in our process.\r\n\r\nWe also have a very high bar. We work with our students for a very long time in admissions. If you're a beginner, start preparing six months ahead. If you are an advanced computer science graduate with engineering experience, you may be able to enroll in two or three weeks.\r\n\r\nDoes every school allow people to apply more than one time if you fail the first try?\r\n\r\nTyler Lambe: We would say no to somebody if there was a very clear lack of alignment as far as being able to work together. And I think it's probably the same for all of us.\r\n\r\nAnd then Jordan, do you want to describe the Flatiron School admissions process?\r\n\r\nJordan Calhoun: We have a three-step admissions process at Flatiron School. There's obviously the application step, then applicants get moved on to the admissions interview, and then if they have a successful admissions interview, they move on to the technical interview.\r\n\r\nThe two main things that we're looking for are obviously the technical aptitude and the passion for coding.\r\n\r\nThe technical aptitude is something that we feel we can teach. If someone has a certain skill set or ability to learn, and I like how Jeff mentioned learning as an adult is difficult. Adult learning and relearning how to learn is really important. But assuming that an applicant has that ability to learn, the thing that we cannot teach is that passion for coding. Someone has to have that drive.\r\n\r\nFor example, if I'm playing a sport that I care about, I'm going to sweat during the practice. I'm going to work hard because I have this goal. As opposed to, if I were an athlete and I was playing racquetball, which I don’t care about, I wouldn’t be working hard to win a racquetball championship. I'm just dabbling.\r\n\r\nOne of the easiest rejections I can make is if someone is applying to Flatiron School, and they say, \"I just wanted to see if I would enjoy coding.\" Obviously, it's a little too soon for that person to make that leap. But if someone has that technical aptitude, which shakes out during the technical interview, and if they have that passion for coding, that combination is what gives us the confidence to admit them.\r\n\r\nAnd then there's the cultural aspect as well, just making sure that culturally, we feel that they're a fit with the vibe that we have, which is unofficially to work hard and be nice.\r\n\r\nJeff Harr: Can we just be careful about the word culture? I just want to be clear. When we say culture, it tends to be internal lingo on our part. When we say culture in relation to coding bootcamps, we're referring to solely your nontechnical fit and your attitude and your vibe in the program, nothing to do with your actual culture or anyone’s.\r\n\r\nJordan Calhoun: Absolutely. That's a great one.\r\n\r\nJeff Harr: We're trying to change the way that we refer to it internally because it's not always obvious to candidates. It's about how you deal with challenges.\r\n\r\nJeff and Tyler, you are both here representing two schools, essentially – Jeff, with Grace Hopper and Fullstack, and then Tyler with Hack Reactor and Galvanize. Does somebody have to apply to both programs separately? I get this question a lot: \"Can I just apply to one and then get put into both application processes?\"\r\n\r\nTyler Lambe: For the month since the news that Galvanize acquired Hack Reactor has been public, that has been one of the most common questions we've been asked. It is the case currently that Hack Reactor is going to be replacing Galvanize's web development program entirely. And so the Galvanize program will be sunsetted immediately.\r\n\r\nSo if you're interested in the software engineering program, Hack Reactor is the only route you can take at this juncture. However, if you're interested in Galvanize's data science program, or any of their other programs, you would still have to go through Galvanize.\r\n\r\nJeff Harr: In our case, not only is the application for Fullstack Academy and the Grace Hopper Program the exact same application – so you'll apply once for all programs – the instruction, the location, the curriculum, everything is the same. So it's two sides of a coin, the differences are the all-female learning environment for Grace Hopper and the deferred tuition model that we have. But from an admissions perspective, you apply once and if you're accepted, you can actually decide which school you want to go to after you've been accepted, and sometimes even into the curriculum of the course.\r\n\r\nKrystal, you work a lot with students after they've been accepted. You're in student success. What's the number one avoidable mistake that somebody can avoid by preparing before they apply or start a bootcamp?\r\n\r\nKrystal Kaplan: There are three things. One, I would say is to consider your future goals. It falls into what you were saying before –  what's your why? How do you demonstrate that you're passionate about coding? Have you dabbled in code before or are you just saying, \"I want to make six figures at the end of three months? Or I want to create a beautiful website or I heard the tech industry is booming.” But really think about what your future goals are.\r\n\r\nThen talk to your friends and family. Make sure your friends and family know how committed you are to this course. The number one soft skill is time management and planning. Plan for the application process, when you're going to quit your job, and when you're going to tell your friends and family.\r\n\r\nAnd then the third thing would be finances. Think about what your finances will be like throughout the program, then after the program when you're searching for a job.​\r\n\r\nThe Coding Challenge\r\n\r\nDoes everybody require a coding challenge? Should applicants expect to have to code during the interview?\r\n\r\nEveryone: Yes.\r\n\r\nWhat do applicants need to know for that? Do they need to know a specific coding language or how to solve a logic problem? What level of technical expertise do they need to have before they apply?\r\n\r\nTyler Lambe: I'll speak on behalf of Hack Reactor, but I think there's probably one kind of commonality that I would encourage most prospective students to consider as they're moving into this world of potentially attending one of these schools.\r\n\r\nI think all of us expect from students some fundamental baseline ability to solve problems. And regardless which programming language that you find yourself needing to know – because we all do teach slightly different technologies and languages – there is this fundamental baseline of knowledge and information that you need to know, that can be applied to all languages. Having a core understanding of what programming is more holistically before you jump into a particular language, it's actually really useful for people. And then once you have that baseline level of information, you can then jump into understanding the particular nuances of any given language that you need to know to get into a school.\r\n\r\nFor Hack Reactor, we expect that you will have a deep understanding of the fundamentals of JavaScript in particular.\r\n\r\nWill, Codesmith is JavaScript too?\r\n\r\nWill Sentance: My view is that you can get to the level of a junior developer or an entry-level developer for free. It can take you a while, but you can get there for free without a doubt. There are so many amazing free resources, for example Free Code Camp is a phenomenal resource – I am eternally grateful to the founder Quincy Larson.\r\n\r\nSo why do a program? I think to get from entry or junior level up to mid-senior is hard. For the Codesmith intake, about a third have done either a CS degree or they've done a coding bootcamp, and they want to level up. A third have done some sort of software engineering, they’ve been a front end developer or something. And then a third are totally self-taught from nothing. I’m a big fan of those people who just dig in. They go through Free Code Camp. They through our Codesmith prep program. I've seen people do that free stuff, like Free Code Camp, and they are able to take an entry-level job straight away earning $60,000.\r\n\r\nThat's the level where Codesmith comes in and says, \"Okay, we'll accelerate you up now to that next stage.\" So that's what we expect. We don’t require you to do another coding bootcamp first, but certainly getting yourself up to that level where you could probably get an entry-level job already – that's the level we expect at Codesmith.\r\n\r\nJeff Harr: I just want to respond to that a little bit. I think Will is totally right about free resources and the quality and the amount of them that are out there, and the different approaches you can take to self-learning. But I think that it's very rare to run across a person who already has the skills to self-teach themselves programming to the level where they can get a job.\r\n\r\nWill Sentance: That's where you need community, and that's where you have your free workshops. We all have our free workshops. Go to free workshops, you can get so far with community.\r\n\r\nJeff Harr: Sure. My point is that we sort of approach it a little differently at Fullstack. You don’t need to know JavaScript; you don't need to know the basic fundamentals of JavaScript at a deep level. We provide you with prep resources, we provide you with free workshops to get there. But we are also going to teach you how to do work as an engineer. And you don't need to know that when you show up. It's an industry that has its own ins and outs, and skill sets. Tons of our senior level curricula is devoted to understanding how to work on an engineering team, make engineering products, meet deadlines, deal with challenges, communicate with your team members. And these are all skills that you absolutely need, to be employed as a software engineer, no matter what you started in, as far as your capabilities.\r\n\r\nSo I want to be very clear that yes, we do require a good understanding of fundamental JavaScript to join our full-time program, but we have entry points for people who know nothing, who have none of these skills. We have entry points for people who already know all of it, and have all the skills. And no matter who you are, our job is to help you understand where am I today, where can I be soon, and what are the steps that I need to take to get there.\r\n\r\nWhile we love self-learners, I think it's distinctive from people who can motivate themselves. I think learning is not an inherently obvious skill set to develop. I think motivation is much more of the uncoachable side of it.\r\n\r\nYou mentioned the passion for coding, but we think if that's there, then we have the curriculum to teach you the technical stuff. And we have a ton of career services, mock interviews, algorithm practice, project management practices, Agile, all these things that we cover in our senior phase, because that's when you have the technical knowledge and the baseline to be ready to learn how to apply this to a work situation. So we graduate entry to mid-level engineers. I wouldn't say senior at Fullstack. It's a little different.\r\n\r\nSo it's less about being able to pass a technical coding challenge and more about being able to prove that you were able to get to a point where you can pass that.\r\n\r\nJeff Harr: And that you want a job as a software engineer. And I would say that I aspire for this to be true. We can take anybody and get them to be successful, but the time frame is different, the skill sets you need to learn are different.\r\n\r\nBut that's our duty to the students – to tell you where you are on that spectrum and what's the ladder you need to climb up to get here. We provide a lot of resources in our program to help you do that, beyond programming knowledge. Students can do the coding assessment in JavaScript, Python, C++, Java, and I believe Ruby.\r\n\r\nJordan, how technically proficient do you have to be in order to pass the coding challenge at Flatiron?\r\n\r\nJordan Calhoun: There are two main things that we look for during the technical interview. And everyone who's been admitted to Flatiron School will have probably heard this field before, at least if they were admitted, by me. There's the technical aptitude side of things. If there's a coding challenge, we want to make sure that you're able to problem solve, and think through these problems in the right way.\r\n\r\nThen the other side of it is the coachability, and that was something that was sort of alluded to earlier in terms of not just motivation, but being able to listen to someone's guidance and perspectives, and an instructor’s guidance and perspectives, to be able to ask the right questions, and engage effectively to solve a problem. That is as important, if not more important than your technical ability.\r\n\r\nBecause, as we said earlier, we can teach to various different abilities. There’s a wide range that we can handle. What we offer as a school is this skill set that we can teach very effectively, that we show that we're able to teach effectively. What we can't teach are those things like passion and motivation. That has to come from the applicant side. Also coachability – that's something that we can help with, but largely has to do with someone before they come to us.\r\n\r\nWhat language is the Flatiron coding challenge in?\r\n\r\nJordan Calhoun: We do the coding challenge in either JavaScript or Ruby. So you have a choice.\r\n\r\nKrystal Kaplan: At New York Code + Design Academy, the technical piece is just front end HTML, CSS, and JavaScript as well. We have a wonderful coach who helps students, as far as breaking down problems, being a cheerleader, a motivator, and also setting action items and timelines for them to get through the content. At this point in the process, individuals are still working full-time, and things like that, so she's there to coach them through. Through this process we're able to really get to know an individual and how coachable they are and how passionate they are about this.​\r\n\r\nBootcamp Prep Programs\r\n\r\nHow do you feel about bootcamp prep programs and when do you think a paid bootcamp prep program is worth it for a student? What types of students should do those?\r\n\r\nTyler Lambe: At Hack Reactor, over the years, we've iterated and figured out the best way to try and prepare people for the program. Upon entering into this world of “how do you best prepare somebody to come to Hack Reactor,” we reverse engineered what we expected people to be doing on day one, to figure out all of the necessary steps in minute detail that were necessary to ramp somebody up. At Hack Reactor we've designed this program so that you are repeatedly thrown into these different kinds of challenges. They are similar challenges that you will see in the admissions interviews at different schools.\r\n\r\nOne of the things I think is different about the way that Hack Reactor approaches prep programs is that we do not claim to prepare you for any particular bootcamp other than our own. I know many schools out there have different philosophies surrounding this, but the notion here is that you should already know that you want to go to Hack Reactor before you do Hack Reactor's prep program. It's a strong opinion but it is one that we've stuck with, because the way that we teach this information, I think, is not potentially applicable to other locations of schools.\r\n\r\nThese days we have anywhere from 30% to 40% of our entire student body coming through our prep programs. And so I think it's easy to recommend that if you have a school in your sights and they offer a prep program, you should probably trust that that particular school's prep program is going to best prepare you for that particular school.\r\n\r\nAnd they'll usually refund or put your prep program tuition towards their bootcamp tuition, which I think is totally fair. Fullstack also has a prep program?\r\n\r\nJeff Harr: Yes. I don't think I explicitly mentioned what Bootcamp Prep is preparing you for other than the basic JavaScript fundamental concepts to learn. We try to err on the side of a lot of live instruction. Because if you're in that group of people who aren't self-study experts, you’ll need a real teacher, some TAs, and a help desk when you're having a problem solving a piece of code.\r\n\r\nWhile you're not going to get handheld in the job that you get after the program, when you're just starting out, and you're not even sure yet if you want to work a career as a software engineer, getting that human front end touch is really important, which is why I will answer your question with, I believe it's valuable to take a prep program of live instruction. I believe it's valuable to pay for that instruction, which guarantees that the people you're going to be pair programming with in that course are just as invested in it as you.\r\n\r\nI think it's important that a prep course is not an independent product, and that it's designed to onboard you into an immersive program. These things wouldn't exist in a vacuum. There's no reason to learn the first 5% of JavaScript and stop there other than \"I want to continue learning JavaScript.\" So this is a great way. I would advise anybody to do a prep program.\r\n\r\nIf you're still not sure if you want to spend every day nine to five developing software for money, and you want to try it out, prep programs are an amazing way to do that. And that's really what we want you to be sure of. Everybody up here wants you to be dang sure that you want that career because, at least at Fullstack and Grace Hopper, that's how we measure our success. How many people we got jobs? They want jobs, we want them to get jobs. If you get a job, we're successful, we're all successful. So I think that prep is a super valid way do that.\r\n\r\nWill, you have a Codesmith prep program now, right?\r\n\r\nWill Sentance: Yeah. I was always very anti-prep programs, because I felt they were giving a false impression of what coding was. It's much more worthwhile, if you're trying to get people into a program, to make it as fun, and easy-lifting as possible, to get people excited.\r\n\r\nThe only way we wanted do a prep program was if it actually trained you in what makes a great engineer, which is, unfortunately, hitting a lot of blocks and struggling through them again and again. That's why I have massive admiration for programs that have that pedagogy. No hand holding because that does not work through mid-level engineering. That's why I will shout out to the great programs here that do that – that push you through blocks again and again.\r\n\r\nSo we figured out a way and started a program earlier this year to do just that. The project that you build is vanilla JavaScript only, which sounds boring but actually takes you back to the days when you would build end to end, every last bit of a basketball simulation game or a Texas Hold'em with a GUI, made out of text stuff. But that is where you get a real taste of what actual engineering is. What actual mid-level engineering, which is what Codesmith is targeting, looks like. But it isn't as satisfying as that sort of fun, easy way of building a nice personal site.\r\n\r\nSo I'm still torn on it. It works, but it’s not glossy because, in the end, mid-level engineering on the job, is about hitting blocks and that autonomy to navigate through. You never want to fake that, and so the prep program is just as authentically demanding.\r\n\r\nIt's nice that your prep program mimics the pedagogy of the actual bootcamp. I think prep programs are really interesting, but I would agree that it's best to do a prep program if you want to go to that school and you want a straight narrow path to get into it.\r\n\r\nJeff Harr: We do a Markov chain poetry generator. I have a Soviet history degree but I did our prep program, and four weeks later I was writing a program like that and passing our assessment, it really made me identify with the students that are coming at this from a nontechnical background.\r\n\r\nOne thing I want to stress is that these prep programs are much more effective and useful if you don't have previous tech experience – you almost need to do one. And whether the code you write and the projects you build in that prep program are technically impressive or not, you get that exposure, experience, understanding of what engineering and solving problems is, and the satisfaction from understanding. \"Look, I have achieved the thing. I typed JavaScript into a window and it made a thing happen.\"\r\n\r\nAt that level of the process, understanding that you enjoy that feeling and you want more of it, that's what bootcamp prep is about. It's about helping you know that you want to be an engineer.\r\n\r\nJordan Calhoun: Regarding the bootcamp prep thing, Flatiron School has an amazing bootcamp prep and it's designed to segue students from pretty much beginner level as you had mentioned to being a successful Flatiron School student.\r\n\r\nWill Sentance: Can I add one thing. A lot of people end up doing multiple prep programs. I think that's nice. That's a great way to expose yourself to a culture and figure out what culture is right. So a lot of people will do Fullstack and then Codesmith. I think that's fantastic. A lot of them have scholarships as well. I'm sure everyone has those.​\r\n\r\nAge Limits at Coding Bootcamp\r\n\r\nA question that we get all the time is, are there age minimums and maximums? Do you have to be a certain age and will you not accept somebody who's above a certain age?\r\n\r\nKrystal Kaplan: Just to finish out from the last question, at New York Code + Design Academy we don't have a prep program but we do have eight-week courses for students who haven't ever coded before, who have only gotten so far in doing Treehouse, or Lynda or whatever.\r\n\r\nAs far as admissions and age range, anybody who's over 18 is welcome to join our community.\r\n\r\nDoes everyone require students to be 18?\r\n\r\nEveryone: Yes\r\n\r\nDo you ever accept people under 18?\r\n\r\nJeff Harr: No.\r\n\r\nTyler Lambe: We used to.\r\n\r\nJeff Harr: But I think we've done up to 62 or 58 years old.\r\n\r\nDo you get a lot of questions from later career changers saying, \"Can I do this?\" Because I get this question all the time.\r\n\r\nJeff Harr: Their main question is, “Is it too late to do this?” It's different for everyone. One area where I think older students have an advantage is that they have a ton of work experience. And remember, that part of our curriculum is about teaching you skills to get a job. If you already are great at that, you can interview well, you've learned half of that curriculum already – how to talk about accomplishments, how to feature your projects, 30-second elevator pitches, all that stuff.\r\n\r\nNow, you still want to graduate as someone who's incredibly ready to be an engineer, and we hold all of our graduates to that standard, but I would say that for a more experienced student, it's not any more of a challenge overall, depending on your previous situation. I think we had a carpenter in their 50s do our program.\r\n\r\nKrystal Kaplan: At New York Code + Design, our program is software engineering, but we also treat each individual as an individual. They all have different goals and different purposes for being in the program. So while becoming a web developer is that drive, the vehicle, we also expose them to different career pathways in tech.\r\n\r\nWe've had individuals who might have had a career in hospitality and they say, \"I've been a waiter for 10 years. It has nothing to do with tech. I was a truck driver. I was a lawyer.\" And they think there are no transferable skills. But we work with them to say, \"Oh, you were a bartender, so you can work well under pressure, you've worked with all different types of people, you are organized, so plus the dev skills, you’d make a really good project manager.\"\r\n\r\nFor individuals with many years of work experience, exposing them to different career pathways in tech can also help them accomplish those goals.\r\n\r\nJordan Calhoun: Regarding the age minimum and maximum, the only one thing I wanted to add is that age diversity is part of diversity, and it's an important part. And we look at that diversity as an important addition that enhances a cohort. An older applicant, or someone with career experience, or is from the circus, they are not a liability at all. They're bringing a different perspective that can only enrich that cohort.​\r\n\r\nBootcamp Interview Questions\r\n\r\nWhat is the most important question that you asked during the application process?\r\n\r\nJordan Calhoun: Why you want to be a software engineer? Absolutely that one. I don't feel like I need to give much context.\r\n\r\nTyler Lambe: I think there's a lot of different ways to ask the question why, and that's ultimately what I think probably all of us will try to get at in the interview process. Someone mentioned earlier that this notion of just getting into this space because people make a lot of money doing this work, is flimsy. That reason doesn't really hold its weight when you get into one of these programs because they're intense. Even if you make it through one of these programs and end up at the end of the tunnel, there are another three to six months’ worth of hard work to do where it's even more on you to figure that out. Answering the why question really early on and identifying people's intrinsic passions and desires for this kind of work is paramount in the interview process.\r\n\r\nWill Sentance: It’s slightly different for us. That definitely is part of it. But the question we ask that's most important is, if you're pair programming with somebody who is less experienced than you, how does that make you feel? What do you do? How do you handle that? What do you do?\r\n\r\nMy view has always been, which is a big part of Codesmith, is academic excellence is 80% of what makes Codesmith. 20% though is if you're striving for academic excellence, you need a warm and supportive community where every person is growing those around them, perhaps even prioritizing that over growing themselves. You get that and you get this multiplicative effect.\r\n\r\nSo if you have people coming in, who say, \"I'm here to serve myself, you know less, what can I get out of you,” then you're done. That's not going to work. But if you have people go, \"Wow, now's my chance to mentor you, improve my communication, improve my ability to explicate complexity, and make it meaningful to somebody else,” then you've got a group of givers. And that is what builds a great community. So that is the most important question for us.\r\n\r\nKrystal Kaplan: For New York Code + Design Academy, it's similar – why are you interested in coding and making sure that they are asking follow up questions on how they demonstrate that. They used to be a gamer or they attend meetups or they've dabbled in code, whatever that medium is. And then also, how will you contribute to the community? I think it goes hand in hand in what you were saying before. And asking them how are they are going to handle this intensity, and what are the alternatives and things like that.\r\n\r\nSo the why, and how you'll contribute/give back to the community. Anything else? Those are pretty good questions.\r\n\r\nJordan Calhoun: Same yeah, we also have the question of collaboration and how you collaborate with others.\r\n\r\nJeff Harr: I will raise one other one that's really important that can sometimes get overlooked. Each of us at our schools is trying to cultivate an open, and supportive, and diverse, and transparent culture. And what that means is that if you are not someone who was willing to, or even excited by the possibility of collaborating with people who are totally different age from you, gender, race, political outlook, culture or language, previous career, whatever, if you're not coming into our environment – and we say this straight up to people; it's part of our no assholes rule – if that doesn't sound like you, we don't want you to continue on with us.\r\n\r\nWe tend to focus a lot on the operations of the job, the day to day of the job, but I think all of us would support stepping back for a second and saying, \"Fundamentally, before all of this stuff, are you an asshole? Or are you excited by the prospect of working with people who are totally different from you, who have the same goal?” The culture questions, the attitude, all of this rolls up to the fact that these organizations and schools are educational institutions that are trying to create a better world and that's part of our mission.​\r\n\r\nBootcamp Acceptance Rates\r\n\r\nWhat are the acceptance rates like at your bootcamp? What percentage of applicants get in?\r\n\r\nTyler Lambe: This is a question I get asked all the time. And I think that there are different ways to answer this, some that are more impressive than others, and some that are like, \"Oh, that's a boring number. Why did I ask that question?\"\r\n\r\nIf you're looking at the number of people who simply apply to a program and then end up there on day one of a particular class, that is an astronomically low number. I could give you a number that's like 6%, and it's a real number. It's accurate. I can say “This is the number of people who applied and some of those people ended up in a particular cohort.” And you think, \"Wow, 6%, that's amazing.\"\r\n\r\nThe other answer is, \"How many people actually pass the technical interview?\" And I think that is oftentimes what most people getting at when they ask this question. And I can speak on behalf of Hack Reactor as far as these numbers are concerned. It's roughly one in four people will pass the technical interview that we give them on the first go through.\r\n\r\nWe do allow for people to take the assessment three times. And so the number is about 20% to 25% of people will pass the first one, and then that number only goes up usually by a magnitude of, 10% or 15%, on each try thereafter.\r\n\r\nJeff Harr: Really the motivation for the question is what's important. I think people are used to using acceptance rates like a metric, because it's very common in higher education. At Harvard, you get one shot. You're going to be a freshman, you're applying to a bunch of colleges, you get one shot to apply there. It's really important when you're applying to know your chances so that you can manage your anxiety, understand how your applications should be prioritized, and how much time you should put into it.\r\n\r\nBut it’s a totally different world here. Especially at Fullstack and Grace Hopper, the fact that we don't expect you to get in on your first try means that these direct conversion rates between steps are really not what you're trying to understand. You’re trying to understand what your chances are. And at our school, your chances are 100% if you put in the effort to reach the bar that we have set.\r\n\r\nOne thing that all of us will own up to in our industry, is there are a lot of statistics used in marketing. There's a lot of effort being put into throwing statistics at you. I'm advising you to step back, and besides googling all of our grads on LinkedIn, and making sure they have jobs as software engineers, think about yourself, your personal journey, how you're going to learn these skills, and when is it right for you to be to be taking the various levels of instruction. I totally echo Tyler here. The question is more like, should that be what you're asking? And I don't think any of us would say yes.\r\n\r\nJordan Calhoun: I mean, the crux of that question is obviously fear. They're worried that it's going to be very difficult and their odds are low for them to get accepted. Like you had mentioned earlier, you can throw out a very low number. You could say 6% to 8% or something. And that would be meant to intimidate and bolster ourselves as our acceptance rate is really low. It's really hard to get in and that makes us special.\r\n\r\nThat's the antithesis to what I want. If I put myself in the perspective of someone applying or listening to this panel right now, at some point during this, we all seem like five gatekeeping ogres to them. And that's what we sound like, and I sort of detest that. I want an applicant to know that I am their biggest cheerleader. Outside of their family and friends, no one is rooting for their success more than I am. I want them to be able to get through this process. I want them to feel that what you said about 100% is true. If you're able to meet this threshold, we are rooting for you every step of the way. We don't want your failure. I'm not trying to intimidate you. I'm not trying to scare you.\r\n\r\nSo if at any point we came across as scary, don't look at it that way. Don't think of it that way. We are rooting for you, or at least I am. Let everybody speak for themselves. I'm rooting for your success. I want you to be successful in this course. I want you to make it through the admissions process. Engage us, ask us questions. We are looking for, ultimately, the same thing that the applicant is, in terms of, are they going to a place that is a good fit for them and their goals. And if there's an alignment there, in terms of what they want to do, and what we can offer, then we are as invested in you as you are in yourself. That's what I think of when I hear the question of what is your acceptance rate. This whole sort of complicated Rubik's cube of their fear and insecurity and what is really underlying that.\r\n\r\nKrystal Kaplan: New York Code + Design, we aren't the Harvard of bootcamps. We don’t cherry pick, but we do have standards for sure. We don't throw around numbers. But we do have standards and expect our candidates to hold up to that. And if they go beyond that, that’s extra points for them, it's great.\r\n\r\nTyler Lambe: I think there are some useful statistics for folks to consider when they're looking into bootcamps, particularly the outcomes statistics, I think are really useful. Something that I'm particularly proud of for Hack Reactor and also Fullstack is that we follow a shared methodology for what it means to graduate from a course like this and what it means to be successful.\r\n\r\nWe've pored over very deeply what success means for people when they graduate from these courses. And we've tried incredibly hard to make it easy to compare different schools to one another as far as the outcomes go. Because I think, my perspective, most of the people who come to Hacker Reactor's front door are people who are asking the question, is this program going to help me get a job? I think a more important statistic  to consider is not so much, \"Oh, how difficult it is to get into the program?\" But more so, how successful are people once they're done with it? So I would encourage folks to look into that information.\r\n\r\nWell, thank you so much to each panelist for being here. I hope that everybody learned something about the admissions process at these bootcamps!\r\n\r\nFor more information, and to hear about real student experiences, read Flatiron School reviews, Fullstack Academy reviews, Grace Hopper Program reviews, Codesmith reviews, Hack Reactor reviews, Galvanize reviews, and New York Code + Design Academy reviews.\r\n\r\nFURTHER READING:\r\n\r\n\r\nLearning to Code Before Coding Bootcamp\r\nGuide to Coding Bootcamp Prep Programs\r\n5 Obstacles New Coders Will Overcome\r\n3 Must-Know Concepts Before Coding Bootcamp\r\n7 Developer Tips Before Learning to Code\r\nCoding Bootcamp Glossary of Key Terms\r\n\r\n\n","created_at":"2018-10-15T11:44:00.000-04:00","updated_at":"2018-10-15T17:17:00.000-04:00","published":true,"slug":"how-to-get-into-coding-bootcamp","meta_description":"Reps from 7 bootcamps give tips and tricks for the coding bootcamp interview and coding challenge. Hear from Flatiron School, Hack Reactor, Fullstack Academy, New York Code + Design Academy, the Grace Hopper Program, Galvanize, and Codesmith.","sponsored":false,"sponsorship_begin":null,"sponsorship_expire":null,"image_id":null,"card_info_id":null,"author":"Imogen Crispe","header_url":""}}
